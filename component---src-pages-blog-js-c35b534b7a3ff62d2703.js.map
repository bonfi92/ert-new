{"version":3,"sources":["webpack:///./src/components/blog-post-preview.js","webpack:///./src/components/blog-post-preview-grid.js","webpack:///./src/pages/blog.js"],"names":["BlogPostPreview","props","className","styles","root","to","getBlogUrl","publishedAt","slug","current","leadMediaThumb","mainImage","asset","src","imageUrlFor","buildImageObj","width","height","Math","floor","url","alt","cn","responsiveTitle3","title","_rawExcerpt","excerpt","blocks","BlogPostPreviewGrid","headline","browseMoreHref","grid","nodes","map","node","key","id","browseMoreNav","defaultProps","query","BlogPage","data","errors","postNodes","posts","mapEdgesToNodes","responsiveTitle1","length"],"mappings":"qMAiCeA,MAxBf,SAA0BC,GACxB,OACE,kBAAC,IAAD,CAAMC,UAAWC,IAAOC,KAAMC,GAAIC,YAAWL,EAAMM,YAAaN,EAAMO,KAAKC,UACzE,yBAAKP,UAAWC,IAAOO,gBACpBT,EAAMU,WAAaV,EAAMU,UAAUC,OAClC,yBACEC,IAAKC,YAAYC,YAAcd,EAAMU,YAClCK,MAAM,KACNC,OAAOC,KAAKC,MAAO,QACnBC,MACHC,IAAKpB,EAAMU,UAAUU,OAI3B,wBAAInB,UAAWoB,YAAGC,mBAAkBpB,IAAOqB,QAASvB,EAAMuB,OACzDvB,EAAMwB,aACL,yBAAKvB,UAAWC,IAAOuB,SACrB,kBAAC,IAAD,CAAWC,OAAQ1B,EAAMwB,iB,qBCpBnC,SAASG,EAAqB3B,GAC5B,OACE,yBAAKC,UAAWC,IAAOC,MACpBH,EAAMuB,OACL,wBAAItB,UAAWC,IAAO0B,UACnB5B,EAAM6B,eACL,kBAAC,IAAD,CAAMzB,GAAIJ,EAAM6B,gBAAiB7B,EAAMuB,OAEvCvB,EAAMuB,OAIZ,wBAAItB,UAAWC,IAAO4B,MACnB9B,EAAM+B,OACL/B,EAAM+B,MAAMC,KAAI,SAAAC,GAAI,OAClB,wBAAIC,IAAKD,EAAKE,IACZ,kBAAC,EAAoBF,QAI5BjC,EAAM6B,gBACL,yBAAK5B,UAAWC,IAAOkC,eACrB,kBAAC,IAAD,CAAMhC,GAAIJ,EAAM6B,gBAAhB,iBAOVF,EAAoBU,aAAe,CACjCd,MAAO,GACPQ,MAAO,GACPF,eAAgB,IAGHF,O,kCCzCf,0JAWaW,EAAK,aAgDHC,UAxBE,SAAAvC,GAAU,IACjBwC,EAAiBxC,EAAjBwC,KAAMC,EAAWzC,EAAXyC,OAEd,GAAIA,EACF,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAkBA,OAAQA,KAKhC,IAAMC,EAAYF,GAAQA,EAAKG,OAASC,YAAgBJ,EAAKG,OAE7D,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKpB,MAAM,SACX,kBAAC,IAAD,KACE,wBAAItB,UAAW4C,oBAAf,QACCH,GAAaA,EAAUI,OAAS,GAAK,kBAAC,IAAD,CAAqBf,MAAOW","file":"component---src-pages-blog-js-c35b534b7a3ff62d2703.js","sourcesContent":["import { Link } from 'gatsby'\nimport React from 'react'\nimport { buildImageObj, cn, getBlogUrl } from '../lib/helpers'\nimport { imageUrlFor } from '../lib/image-url'\nimport BlockText from './block-text'\n\nimport styles from './blog-post-preview.module.css'\nimport { responsiveTitle3 } from './typography.module.css'\n\nfunction BlogPostPreview (props) {\n  return (\n    <Link className={styles.root} to={getBlogUrl(props.publishedAt, props.slug.current)}>\n      <div className={styles.leadMediaThumb}>\n        {props.mainImage && props.mainImage.asset && (\n          <img\n            src={imageUrlFor(buildImageObj(props.mainImage))\n              .width(600)\n              .height(Math.floor((9 / 16) * 600))\n              .url()}\n            alt={props.mainImage.alt}\n          />\n        )}\n      </div>\n      <h3 className={cn(responsiveTitle3, styles.title)}>{props.title}</h3>\n      {props._rawExcerpt && (\n        <div className={styles.excerpt}>\n          <BlockText blocks={props._rawExcerpt} />\n        </div>\n      )}\n    </Link>\n  )\n}\n\nexport default BlogPostPreview\n","import { Link } from 'gatsby'\nimport React from 'react'\nimport BlogPostPreview from './blog-post-preview'\n\nimport styles from './blog-post-preview-grid.module.css'\n\nfunction BlogPostPreviewGrid (props) {\n  return (\n    <div className={styles.root}>\n      {props.title && (\n        <h2 className={styles.headline}>\n          {props.browseMoreHref ? (\n            <Link to={props.browseMoreHref}>{props.title}</Link>\n          ) : (\n            props.title\n          )}\n        </h2>\n      )}\n      <ul className={styles.grid}>\n        {props.nodes &&\n          props.nodes.map(node => (\n            <li key={node.id}>\n              <BlogPostPreview {...node} />\n            </li>\n          ))}\n      </ul>\n      {props.browseMoreHref && (\n        <div className={styles.browseMoreNav}>\n          <Link to={props.browseMoreHref}>Browse more</Link>\n        </div>\n      )}\n    </div>\n  )\n}\n\nBlogPostPreviewGrid.defaultProps = {\n  title: '',\n  nodes: [],\n  browseMoreHref: ''\n}\n\nexport default BlogPostPreviewGrid\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport { mapEdgesToNodes } from '../lib/helpers'\nimport BlogPostPreviewGrid from '../components/blog-post-preview-grid'\nimport Container from '../components/container'\nimport GraphQLErrorList from '../components/graphql-error-list'\nimport SEO from '../components/seo'\nimport Layout from '../containers/layout'\n\nimport { responsiveTitle1 } from '../components/typography.module.css'\n\nexport const query = graphql`\n  query BlogPageQuery {\n    posts: allSanityPost(limit: 12, sort: { fields: [publishedAt], order: DESC }) {\n      edges {\n        node {\n          id\n          publishedAt\n          mainImage {\n            asset {\n              _id\n            }\n            alt\n          }\n          title\n          _rawExcerpt\n          slug {\n            current\n          }\n        }\n      }\n    }\n  }\n`\n\nconst BlogPage = props => {\n  const { data, errors } = props\n\n  if (errors) {\n    return (\n      <Layout>\n        <GraphQLErrorList errors={errors} />\n      </Layout>\n    )\n  }\n\n  const postNodes = data && data.posts && mapEdgesToNodes(data.posts)\n\n  return (\n    <Layout>\n      <SEO title='Blog' />\n      <Container>\n        <h1 className={responsiveTitle1}>Blog</h1>\n        {postNodes && postNodes.length > 0 && <BlogPostPreviewGrid nodes={postNodes} />}\n      </Container>\n    </Layout>\n  )\n}\n\nexport default BlogPage\n"],"sourceRoot":""}